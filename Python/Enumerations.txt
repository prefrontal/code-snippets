# ---- Python Enumerations ---------------------------------------------------------------

# Faking enumerations in Python using classes:

	class Materials:
		Shaded, Shiny, Transparent, Matte = range(4)
    
# Automatic initialization:

	class Enumeration(object):
			def __init__(self, names):  # or *names, with no .split()
				for number, name in enumerate(names.split()):
					setattr(self, name, number)

	foo = Enumeration("bar baz quux")

------------------------------------------------------------------------------------------

# Real enumerations (Python 3.4 and above)
# Enum member values are not restricted to integers. Any type of object can be associated with a member.

	from enum import Enum

	class Color(enum.Enum):
		red = 1
		green = 2
		blue = 3

# Use the IntEnum class for enumerations where the members need to behave more like numbers, for example to support comparisons.

	class BugStatus(enum.IntEnum):
		new = 7
		incomplete = 6
		invalid = 5
		wont_fix = 4
		in_progress = 3
		fix_committed = 2
		fix_released = 1
		
# To require all members to have unique values, add the @unique decorator to the Enum.

	@enum.unique
	class BugStatus(enum.Enum):
		...
		

------------------------------------------------------------------------------------------
